@page "/transaction/{accountId:int}"
@inject DatabaseContext DbContext

<PageTitle>MoneyApp : Transactions</PageTitle>

<AuthorizeView Policy= "IsAdmin">
    <Authorized>
        <h1>@(account.Name + " [" + account.Currency + "]")</h1>
        <Button Color="Color.Primary" Clicked="@ShowModal">New Transaction</Button>
        <div class="row py-3 font-weight-bold">
            <div class="col-7">Account balance : </div>
            <div class="col-5 text-right"> @( account.Transactions.Sum(item => item.Amount).ToString("#,##0.00"))</div>
        </div>    
        @foreach (var t in transactions)
        {
            <div class="row py-3 hand border-bottom" @onclick="() => Edit(t)">
                <div class="col-3">@t.Date.ToString("dd/MM/yy")</div>
                <div class="col-3">@t.Category</div>
                <div class="col-3">@t.Description</div>
                <div class="col-3 text-right">@( t.Amount.ToString("#,##0.00"))</div>
            </div>
        }                        
        <Modal @ref="modalRef">
            <ModalContent Centered="true">
                <ModalHeader>
                    <ModalTitle>@( transaction.Id == 0 ? "New : " : "Update : " ) @account.Name </ModalTitle>
                    <CloseButton />
                </ModalHeader>
                <ModalBody>
                    <Field>
                        <FieldLabel>Date</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="@transaction.Date"/>
                    </Field>
                     <Field>
                        <FieldLabel>Category</FieldLabel>
                        <Select @bind-SelectedValue="@transaction.Category">
                            <SelectItem Value="0">Please select one category</SelectItem>
                            @foreach (string c in Category.Data.OrderBy(x => x).ToList())
                            {  
                                <SelectItem Value="@(c)">@c</SelectItem>
                            }
                 
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>Description</FieldLabel>
                        <TextEdit Placeholder="Enter Description...for vendor, product" @bind-Text="@transaction.Description"/> 
                        @* <Autocomplete TItem="MoneyApp.Data.Transaction"
                                TValue="string"
                                Data="@allTransactions"
                                TextField="@(( item ) => item.Description)"
                                ValueField="@(( item ) => item.Description)"
                                @bind-SelectedValue="@transaction.Description"
                                @bind-SelectedText="selectedAutoCompleteText"
                                Placeholder="Enter description..."
                                Filter="AutocompleteFilter.StartsWith"
                                FreeTyping
                                CustomFilter="@(( item, searchValue ) => item.Description.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
                             <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
                        </Autocomplete> *@
                    </Field>
                     <Field>
                        <FieldLabel>Amount @account.Currency</FieldLabel>
                        <NumericEdit TValue="float" @bind-Value="@transaction.Amount" />
                    </Field>
                </ModalBody>
                <ModalFooter>
                     @if (transaction.Id != 0){
                        <Button Color="Color.Danger" Clicked="()=> Remove(transaction)">Remove</Button>
                     }
                    <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                    <Button Color="Color.Primary" Clicked="@Save">Save Changes</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    </Authorized>
    <NotAuthorized>
        <p>Please signed in.</p>  
    </NotAuthorized>
</AuthorizeView>


@code{
   
   [Parameter]
    public int accountId {get;set;}
    private Modal modalRef;
    private MoneyApp.Data.Transaction transaction = new();
    private MoneyApp.Data.Account account {get;set;}
    private IEnumerable<MoneyApp.Data.Transaction> allTransactions;
    string selectedAutoCompleteText { get; set; }
    protected override async Task OnInitializedAsync()
    {
        account = await DbContext.Accounts.FindAsync(accountId);
        allTransactions = DbContext.Transactions.GroupBy(x => x.Description).Select(x => x.First()).AsEnumerable().ToList();
    }

     List<MoneyApp.Data.Transaction> transactions{
        get{
            return (from t in DbContext.Transactions where t.AccountId == accountId orderby t.Date descending select t).ToList();
        }
    }
     private Task ShowModal()
    {
        transaction = new();
        transaction.Date = DateTime.Now;        
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
    private Task Edit(MoneyApp.Data.Transaction t)
    {
        transaction = t;
        return modalRef.Show();
    }
    private async Task Save()
    {                
        if (transaction.Id == 0)  // Add new
        {
            MoneyApp.Data.Transaction newTransaction = new(){
                Date = transaction.Date,
                Category = transaction.Category,
                AccountId = accountId,
                Description = transaction.Description,
                Amount = transaction.Amount
            };           
            await DbContext.Transactions.AddAsync(newTransaction);
            await DbContext.SaveChangesAsync();
            transaction.Id = 0;
            transaction.Description = "";
            transaction.Amount = 0;
            StateHasChanged();
        }else{    //Update
            DbContext.Transactions.Update(transaction);
            await DbContext.SaveChangesAsync();
            StateHasChanged();
            modalRef.Hide();
        }  
       
    }
     private async Task Remove(MoneyApp.Data.Transaction t)
    {
        DbContext.Transactions.Remove(t);
        await DbContext.SaveChangesAsync();
        StateHasChanged();
        modalRef.Hide();
      
    }
    
          
    
}