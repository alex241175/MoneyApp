@page "/transaction/{accountId:int}"
@inject DatabaseContext DbContext
@implements IDisposable

<PageTitle>MoneyApp : Transactions</PageTitle>

<AuthorizeView Policy= "IsAdmin">
    <Authorized>
        <h4>@(account.Name + " [" + account.Currency + "]")</h4>
        <div class="row mt-4">
            <div class="col-auto">
                <div class="input-group">
                    <Button Color="Color.Primary" Clicked="@ShowModal">New Transaction</Button>
                    <FieldLabel class="mx-4">Year</FieldLabel>
                    <Select TValue="int" SelectedValue="@filterYear" SelectedValueChanged="@OnSelectedFilterYear">
                        <SelectItem Value="0">Please select year</SelectItem>
                        @foreach (var y in years)
                        {  
                            <SelectItem Value="@y">@y</SelectItem>
                        }                    
                    </Select>
                </div>   
            </div>
        </div>            
        <div class="row py-3 font-weight-bold">
            <div class="col-7 col-md-4">Account balance : </div>
            <div class="col-5 col-md-8 text-right"> @balance.ToString("#,##0.00")</div>
        </div>    
        @foreach (var t in transactions)
        {
            <div class="row py-3 hand border-bottom" @onclick="() => Edit(t)">
                <div class="col-3 col-md-2">@t.Date.ToString("dd/MM/yy")</div>
                <div class="col-4 col-md-2">@t.Category</div>
                <div class="col-5 col-md-2 text-right">@( t.Amount.ToString("#,##0.00"))</div>
                <div class="col-12 col-md-6 small">@t.Description</div>

            </div>
        }                        
        <Modal @ref="modalRef">
            <ModalContent Centered="true">
                <ModalHeader>
                    <ModalTitle>@( transaction.Id == 0 ? "New : " : "Update : " ) @account.Name </ModalTitle>
                    <CloseButton />
                </ModalHeader>
                <ModalBody>
                    <Field>
                        <FieldLabel>Date</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="@transaction.Date"/>
                    </Field>
                     <Field>
                        <FieldLabel>Category</FieldLabel>
                        <Select @bind-SelectedValue="@transaction.Category">
                            <SelectItem Value="0">Please select one category</SelectItem>
                            @foreach (string c in Category.Data.OrderBy(x => x).ToList())
                            {  
                                <SelectItem Value="@(c)">@c</SelectItem>
                            }
                 
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>Description</FieldLabel>
                        @* <TextEdit Placeholder="Enter Description...for vendor, product" @bind-Text="@transaction.Description"/>  *@
                        <Autocomplete TItem="MoneyApp.Data.Transaction"
                                TValue="string"
                                Data="@allTransactions"
                                TextField="@(( item ) => item.Description)"
                                ValueField="@(( item ) => item.Description)"
                                @bind-SelectedValue="@transaction.Description"
                                @bind-SelectedText="@selectedAutoCompleteText"
                                Placeholder="Enter description..."
                                Filter="AutocompleteFilter.StartsWith"
                                FreeTyping
                                CustomFilter="@(( item, searchValue ) => item.Description?.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
                        </Autocomplete>
                        @* <RadzenAutoComplete Data=@allTransactions TextProperty="Description" Placeholder="Enter Description...for vendor, product" @bind-Value="transaction.Description" Style="Width:100%;" /> *@

                    </Field>
                     <Field>
                        <FieldLabel>Amount @account.Currency</FieldLabel>
                     </Field>
                     <Field>
                        <input @bind="@transaction.Amount" >
                        @* <TextEdit @bind-Text="@transaction.Amount.ToString()" /> *@
                         @* <NumericEdit @bind-Text="@transaction.Amount.ToString()" /> *@
                    </Field>
                </ModalBody>
                <ModalFooter>
                     @if (transaction.Id != 0){
                        <Button Color="Color.Danger" Clicked="()=> Remove(transaction)">Remove</Button>
                     }
                    <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                    <Button Color="Color.Primary" Clicked="@Save">Save Changes</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
        <SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Right" />
    </Authorized>
    <NotAuthorized>
        <p>Please signed in.</p>  
    </NotAuthorized>
</AuthorizeView>


@code{
   
   [Parameter]
    public int accountId {get;set;}
    private Modal modalRef;
    private MoneyApp.Data.Transaction transaction = new();
    private MoneyApp.Data.Account account {get;set;}
    private IEnumerable<MoneyApp.Data.Transaction> allTransactions {get;set;}
    public string selectedSearchValue { get; set; }
    public string selectedAutoCompleteText { get; set; } ="";
    private int filterYear;
    private float balance;
    private List<int> years = new();
    SnackbarStack snackbarStack;
  
    protected override async Task OnInitializedAsync()
    {
        account = await DbContext.Accounts.FindAsync(accountId);
        var thisYear = DateTime.Today.Year;
        for (int i= 0; i<5;i++){
            years.Add(thisYear-i);
        }
        filterYear = thisYear;
        allTransactions = DbContext.Transactions.GroupBy(x => x.Description).Select(x => x.First()).ToList();  // for description autocomplete
        //allTransactions = DbContext.Transactions.ToList();
        balance = (from t in DbContext.Transactions where t.AccountId == accountId select t.Amount).Sum();
    }

     List<MoneyApp.Data.Transaction> transactions{
        get{
            return (from t in DbContext.Transactions where t.Date.Year == filterYear where t.AccountId == accountId orderby t.Date descending select t).ToList();
        }
    }

    private void OnSelectedFilterYear(int value){
        filterYear = value;
        StateHasChanged();
    }
     private Task ShowModal()
    {
        transaction = new();
        transaction.Date = DateTime.Now; 
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
    private Task Edit(MoneyApp.Data.Transaction t)
    {
        transaction = t;
        return modalRef.Show();
    }
    private async Task Save()
    {                
        if (transaction.Id == 0)  // Add new
        {
            MoneyApp.Data.Transaction newTransaction = new(){
                Date = transaction.Date,
                Category = transaction.Category,
                AccountId = accountId,
                Description = selectedAutoCompleteText,
                Amount = transaction.Amount
            };           
            await DbContext.Transactions.AddAsync(newTransaction);
            await DbContext.SaveChangesAsync();
            transaction.Id = 0;
            transaction.Description = "";
            transaction.Amount = 0;
            StateHasChanged();
            await snackbarStack.PushAsync("Transaction added", SnackbarColor.Primary, options => {  options.IntervalBeforeClose = 2000;});

        }else{    //Update
            transaction.Description = selectedAutoCompleteText;
            DbContext.Transactions.Update(transaction);
            await DbContext.SaveChangesAsync();
            StateHasChanged();
            modalRef.Hide();
        }  
       
    }
     private async Task Remove(MoneyApp.Data.Transaction t)
    {
        DbContext.Transactions.Remove(t);
        await DbContext.SaveChangesAsync();
        StateHasChanged();
        modalRef.Hide();
      
    }

    public void Dispose()
    {
        @* DbContext.Entry(transactions).State = EntityState.Unchanged;  //revert all unsaved changes *@
    }
    
          
    
}